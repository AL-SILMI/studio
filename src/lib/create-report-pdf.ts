import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import { SpeechAnalysisForCognitiveDeclineOutput } from '@/ai/flows/speech-analysis-for-cognitive-decline';
import { GenerateDementiaRiskScoreOutput } from '@/ai/flows/generate-dementia-risk-score';
import { format } from 'date-fns';

interface ReportData {
    userName: string;
    riskScoreData: GenerateDementiaRiskScoreOutput;
    speechAnalysisData: SpeechAnalysisForCognitiveDeclineOutput;
    cognitivePerformanceData: string;
}

export function createReportPdf(data: ReportData) {
    const doc = new jsPDF();
    const { userName, riskScoreData, speechAnalysisData, cognitivePerformanceData } = data;

    const pageHeight = doc.internal.pageSize.height || doc.internal.pageSize.getHeight();
    const pageWidth = doc.internal.pageSize.width || doc.internal.pageSize.getWidth();

    // Header
    doc.setFontSize(22);
    doc.setFont('helvetica', 'bold');
    doc.text('CogniScreen Assessment Report', pageWidth / 2, 20, { align: 'center' });
    
    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');
    const reportDate = format(new Date(), 'MMMM d, yyyy');
    doc.text(`Date: ${reportDate}`, pageWidth / 2, 30, { align: 'center' });
    
    doc.setFont('helvetica', 'bold');
    doc.text('Patient Name:', 14, 40);
    doc.setFont('helvetica', 'normal');
    doc.text(userName, 45, 40);


    let yPosition = 55;

    // --- Risk Score Section ---
    doc.setFontSize(18);
    doc.setFont('helvetica', 'bold');
    doc.text('Overall Risk Score', 14, yPosition);
    yPosition += 8;

    doc.setFontSize(40);
    doc.setFont('helvetica', 'bold');
    const riskScore = riskScoreData.riskScore.toString();
    const riskScoreWidth = doc.getTextWidth(riskScore);
    doc.text(riskScore, 24 - riskScoreWidth / 2, yPosition + 10);
    
    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');
    doc.text('/ 100', 30, yPosition + 10);

    const riskFactorsText = doc.splitTextToSize(riskScoreData.riskFactors, pageWidth - 60);
    doc.text('Key Risk Factors:', 50, yPosition);
    doc.text(riskFactorsText, 50, yPosition + 6);
    yPosition += riskFactorsText.length * 5 + 10;
    
    const recommendationsText = doc.splitTextToSize(riskScoreData.recommendations, pageWidth - 60);
    doc.text('Recommendations:', 50, yPosition);
    doc.text(recommendationsText, 50, yPosition + 6);
    yPosition += recommendationsText.length * 5 + 15;


    // --- Assessments Details Table ---
    doc.setFontSize(18);
    doc.setFont('helvetica', 'bold');
    doc.text('Assessment Details', 14, yPosition);
    yPosition += 8;

    autoTable(doc, {
        startY: yPosition,
        head: [['Assessment', 'Summary']],
        body: [
            ['Cognitive Task Performance', cognitivePerformanceData],
            ['Speech Pattern Analysis', speechAnalysisData.cognitiveDeclineIndicators],
        ],
        theme: 'grid',
        headStyles: {
            fillColor: [22, 163, 74], // primary color
            textColor: 255,
            fontStyle: 'bold',
        },
        columnStyles: {
            0: { fontStyle: 'bold', cellWidth: 50 },
        }
    });

    yPosition = (doc as any).lastAutoTable.finalY + 20;

    // --- Disclaimer ---
    if (yPosition > pageHeight - 40) {
        doc.addPage();
        yPosition = 20;
    }
    doc.setFontSize(10);
    doc.setFont('helvetica', 'italic');
    doc.setTextColor(100);
    const disclaimer = `This report is generated by an AI assistant and is not a substitute for professional medical advice, diagnosis, or treatment. The score and analysis are based on the data provided and should be considered preliminary. Please consult with a qualified healthcare provider for any health concerns or before making any decisions related to your health.`;
    const disclaimerLines = doc.splitTextToSize(disclaimer, pageWidth - 28);
    doc.text('Disclaimer:', 14, yPosition);
    doc.text(disclaimerLines, 14, yPosition + 5);

    // --- Footer ---
    const pageCount = (doc as any).internal.getNumberOfPages();
    for(let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        doc.setFontSize(10);
        doc.text(`Page ${i} of ${pageCount}`, pageWidth - 25, pageHeight - 10);
        doc.text('Â© CogniScreen', 14, pageHeight - 10);
    }

    // --- Save the PDF ---
    doc.save(`CogniScreen-Report-${format(new Date(), 'yyyy-MM-dd')}.pdf`);
}
